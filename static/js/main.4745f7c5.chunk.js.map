{"version":3,"sources":["reportWebVitals.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Square","props","className","class","onClick","value","Board","i","winningLine","this","includes","console","log","squares","items","j","push","renderSquare","getRow","React","Component","Game","state","history","Array","fill","col","row","stepNumber","xIsNext","sortedAsc","slice","length","postion","position","Math","floor","calculatePosition","calculateWinner","undefined","setState","concat","selectedItem","step","status","current","winning","moves","map","move","desc","jumpTo","win","winner","handleClick","reverse","lines","a","b","c","d","e","ReactDOM","render","document","getElementById"],"mappings":"0MAYeA,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,OCFd,SAASQ,EAAOC,GAAQ,IAAD,EACfC,EAAY,qBAAaD,EAAME,aAAnB,QAA4B,IAC9C,OACE,wBAAQD,UAAWA,EAAWE,QAASH,EAAMG,QAA7C,SACGH,EAAMI,Q,IAKPC,E,kKACJ,SAAaC,GAAI,IAAD,OACRC,EAAcC,KAAKR,MAAMO,YAM/B,OAJoB,OAAhBA,GAAwBA,EAAYE,SAASH,IAC/CI,QAAQC,IAAI,QAIZ,cAACZ,EAAD,CACEG,MAA0B,OAAhBK,GAAwBA,EAAYE,SAASH,GAAK,iBAAmB,GAC/EF,MAAQI,KAAKR,MAAMY,QAAQN,GAC3BH,QAAU,kBAAM,EAAKH,MAAMG,QAAQG,Q,oBAKzC,SAAOA,GAEL,IADA,IAAIO,EAAQ,GACHC,EAAI,EAAGA,EAAI,EAAGA,IACrBD,EAAME,KAAKP,KAAKQ,aAAe,EAAFV,EAAIQ,IAEnC,OAAO,qBAAKb,UAAU,YAAf,SAA4BY,M,oBAGrC,WACE,IAAIA,EAAQ,GAEZA,EAAME,KAAK,yBACX,IAAK,IAAIT,EAAI,EAAGA,EAAI,EAAGA,IACrBO,EAAME,KAAKP,KAAKS,OAAOX,IAEzB,OAAO,8BAAMO,Q,GAhCGK,IAAMC,WAoCpBC,E,kDACJ,WAAYpB,GAAQ,IAAD,8BACjB,cAAMA,IACDqB,MAAQ,CACXC,QAAS,CACP,CACEV,QAASW,MAAM,GAAGC,KAAK,MACvBC,IAAK,KACLC,IAAK,OAGTC,WAAY,EACZC,SAAS,EACTC,WAAW,GAZI,E,+CAgBnB,SAAYvB,GACV,IAAMgB,EAAUd,KAAKa,MAAMC,QAAQQ,MAAM,EAAGtB,KAAKa,MAAMM,WAAa,GAE9Df,EADUU,EAAQA,EAAQS,OAAS,GACjBnB,QAAQkB,QAC5BE,EAoFR,SAA2BC,GACzB,IAAMR,EAAMQ,EAAS,EACfP,EAAMQ,KAAKC,MAAMF,EAAS,GAEhC,MAAO,CAAER,MAAKC,OAxFEU,CAAkB9B,GAGhB,OAFF+B,EAAgBzB,IAEU,OAAfA,EAAQN,SAA8BgC,IAAf1B,EAAQN,KAGxDI,QAAQC,IAAIC,EAAQN,IAEpBM,EAAQN,GAAKE,KAAKa,MAAMO,QAAU,IAAM,IACxCpB,KAAK+B,SAAS,CACZjB,QAASA,EAAQkB,OAAO,CACtB,CACE5B,QAASA,EACTc,IAAKM,EAAQN,IACbD,IAAKO,EAAQP,OAGjBgB,aAAcnC,EACdqB,WAAYL,EAAQS,OACpBH,SAAUpB,KAAKa,MAAMO,a,oBAIzB,SAAOc,GACLlC,KAAK+B,SAAS,CACZZ,WAAYe,EACZd,QAAUc,EAAO,IAAO,M,oBAI5B,WAAU,IAAD,EAmBHC,EAnBG,OACDrB,EAAUd,KAAKa,MAAMC,QACrBsB,EAAUtB,EAAQd,KAAKa,MAAMM,YAC7BkB,EAAUR,EAAgBO,EAAQhC,SAClCe,EAAanB,KAAKa,MAAMM,WAExBmB,EAAQxB,EAAQyB,KAAI,SAACL,EAAMM,GAC/B,IAAMC,EAAOD,EACX,eAAiBA,EAAO,IAAMN,EAAKjB,IAAM,KAAOiB,EAAKhB,IAAM,IAC3D,mBACF,OACE,6BACE,wBACEzB,UAAW+C,IAASrB,EAAa,WAAa,GAC9CxB,QAAS,kBAAM,EAAK+C,OAAOF,IAF7B,SAEqCC,KAH9BD,MAiBb,OAPEL,EADc,OAAZE,EACO,iBAAmBrC,KAAKa,MAAMO,QAAU,IAAM,KAC9CiB,EAAQM,IACR,WAAaN,EAAQO,OAErB,sBAIT,sBAAKnD,UAAU,OAAf,UACE,qBAAKA,UAAU,aAAf,SACE,cAAC,EAAD,CACEW,QAASgC,EAAQhC,QACjBL,YAAcsC,GAAO,UAAGA,EAAQtC,mBAAX,QAAkC,KACvDJ,QAAS,SAAAG,GAAC,OAAI,EAAK+C,YAAY/C,QAGnC,sBAAKL,UAAU,YAAf,UACE,8BAAM0C,IACN,wBAAQxC,QAAS,kBAAM,EAAKoC,SAAS,CAAKV,WAAY,EAAKR,MAAMQ,aAAjE,6BACA,6BAAMrB,KAAKa,MAAMQ,UAAWiB,EAAQA,EAAMQ,sB,GA3FjCpC,IAAMC,WAgHzB,SAASkB,EAAgBzB,GAevB,IAdA,IAAM2C,EAAQ,CACZ,CAAC,EAAG,EAAG,EAAG,EAAG,GACb,CAAC,EAAG,EAAG,EAAG,EAAG,GACb,CAAC,GAAI,GAAI,GAAI,GAAI,IACjB,CAAC,GAAI,GAAI,GAAI,GAAI,IACjB,CAAC,GAAI,GAAI,GAAI,GAAI,IACjB,CAAC,EAAG,EAAG,GAAI,GAAI,IACf,CAAC,EAAG,EAAG,GAAI,GAAI,IACf,CAAC,EAAG,EAAG,GAAI,GAAI,IACf,CAAC,EAAG,EAAG,GAAI,GAAI,IACf,CAAC,EAAG,EAAG,GAAI,GAAI,IACf,CAAC,EAAG,EAAG,GAAI,GAAI,IACf,CAAC,EAAG,EAAG,GAAI,GAAI,KAERjD,EAAI,EAAGA,EAAIiD,EAAMxB,OAAQzB,IAAK,CACrC,kBAAsBiD,EAAMjD,GAA5B,GAAKkD,EAAL,KAAQC,EAAR,KAAWC,EAAX,KAAcC,EAAd,KAAiBC,EAAjB,KACA,GAAIhD,EAAQ4C,IAAM5C,EAAQ4C,KAAO5C,EAAQ6C,IAAM7C,EAAQ4C,KAAO5C,EAAQ8C,IAAM9C,EAAQ4C,KAAO5C,EAAQ+C,IAAM/C,EAAQ4C,KAAO5C,EAAQgD,GAC9H,MAAO,CAACT,KAAK,EAAMC,OAAQxC,EAAQ4C,GAAIjD,YAAa,CAACiD,EAAGC,EAAGC,EAAGC,EAAGC,IAIrE,IAAK,IAAItD,EAAI,EAAGA,EAAIM,EAAQmB,OAAQzB,IAClC,GAAmB,OAAfM,EAAQN,SAA8BgC,IAAf1B,EAAQN,GACjC,OAAO,KAIX,MAAO,CAAC6C,KAAK,GAxCfU,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,SA4C1B1E,M","file":"static/js/main.4745f7c5.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\n\nfunction Square(props) { \n  const className = 'square ' + (props.class ?? '');\n  return (\n    <button className={className} onClick={props.onClick}>\n      {props.value}\n    </button>\n  );\n}\n\nclass Board extends React.Component {\n  renderSquare(i) {\n    const winningLine = this.props.winningLine;\n\n    if (winningLine !== null && winningLine.includes(i)) {\n      console.log(\"true\");\n    }\n\n    return (\n      <Square\n        class={ ((winningLine !== null && winningLine.includes(i))? \"hightlightCell\" : \"\") }\n        value={ this.props.squares[i] }\n        onClick={ () => this.props.onClick(i) }\n      />\n    );\n  }\n\n  getRow(i) {\n    let items = [];\n    for (let j = 0; j < 5; j++) {\n      items.push(this.renderSquare(i*5+j));\n    }\n    return <div className=\"board-row\">{items}</div>;\n  }\n  \n  render() {\n    let items = [];\n\n    items.push(<div></div>)\n    for (let i = 0; i < 5; i++) {\n      items.push(this.getRow(i));\n    }\n    return <div>{items}</div>;\n  }\n}\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      history: [\n        {\n          squares: Array(9).fill(null),\n          col: null,\n          row: null\n        }\n      ],\n      stepNumber: 0,\n      xIsNext: true,\n      sortedAsc: true\n    };\n  }\n\n  handleClick(i) {\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\n    const current = history[history.length - 1];\n    const squares = current.squares.slice();\n    let postion = calculatePosition(i);\n    let winning = calculateWinner(squares);\n\n    if (winning !== null || (squares[i] !== null && squares[i] !== undefined)) {\n      return;\n    } \n    console.log(squares[i]);\n    \n    squares[i] = this.state.xIsNext ? \"X\" : \"O\";\n    this.setState({\n      history: history.concat([\n        {\n          squares: squares,\n          row: postion.row,\n          col: postion.col\n        }\n      ]),\n      selectedItem: i,\n      stepNumber: history.length,\n      xIsNext: !this.state.xIsNext,\n    });\n  }\n\n  jumpTo(step) {\n    this.setState({\n      stepNumber: step,\n      xIsNext: (step % 2) === 0\n    });\n  }\n\n  render() {\n    const history = this.state.history;\n    const current = history[this.state.stepNumber];\n    const winning = calculateWinner(current.squares);\n    const stepNumber = this.state.stepNumber;\n\n    const moves = history.map((step, move) => {\n      const desc = move ?\n        'Go to move #' + move + \"(\" + step.col + \", \" + step.row + \")\" :\n        'Go to game start';\n      return (\n        <li key={move}>\n          <button\n            className={move === stepNumber ? \"textBold\" : \"\"} \n            onClick={() => this.jumpTo(move)}>{desc}</button>\n        </li>\n      );\n    });\n\n    let status;\n    if (winning === null) {\n      status = \"Next player: \" + (this.state.xIsNext ? \"X\" : \"O\");\n    } else if (winning.win) {\n      status = \"Winner: \" + winning.winner;\n    } else {\n      status = \"This match is draw!\"\n    }\n\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board\n            squares={current.squares}\n            winningLine={ winning? (winning.winningLine ?? null) : null }\n            onClick={i => this.handleClick(i)}\n          />\n        </div>\n        <div className=\"game-info\">\n          <div>{status}</div>\n          <button onClick={() => this.setState({    sortedAsc: !this.state.sortedAsc  })}> Sort The Move </button>\n          <ol>{ this.state.sortedAsc? moves : moves.reverse()}</ol>\n        </div>\n      </div>\n    );\n  }\n}\n\n// ========================================\n\nReactDOM.render(\n  <Game />,\n  document.getElementById('root')\n);\n\nfunction calculatePosition(position){\n  const col = position%5;\n  const row = Math.floor(position/5);\n\n  return { col, row}\n}\n\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2, 3, 4],\n    [5, 6, 7, 8, 9],\n    [10, 11, 12, 13, 14],\n    [15, 16, 17, 18, 19],\n    [20, 21, 22, 23, 24],\n    [0, 5, 10, 15, 20],\n    [1, 6, 11, 16, 21],\n    [2, 7, 12, 17, 22],\n    [3, 8, 13, 18, 23],\n    [4, 9, 14, 19, 24],\n    [0, 6, 12, 18, 24],\n    [4, 8, 12, 16, 20],\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    let [a, b, c, d, e] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c] && squares[a] === squares[d] && squares[a] === squares[e]) {\n      return {win: true, winner: squares[a], winningLine: [a, b, c, d, e]} ;\n    }\n  }\n\n  for (let i = 0; i < squares.length; i++){\n    if (squares[i] === null || squares[i] === undefined){\n      return null;\n    }\n  }\n\n  return {win: false} ;\n}\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}